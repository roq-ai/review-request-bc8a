generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model company {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?   @db.VarChar
  location    String?   @db.VarChar(100)
  industry    String?   @db.VarChar(50)
  website     String?   @db.VarChar(100)
  name        String    @db.VarChar(255)
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  updated_at  DateTime  @default(now()) @db.Timestamp(6)
  user_id     String    @db.Uuid
  tenant_id   String    @db.VarChar(255)
  user        user      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  product     product[]
  review      review[]
}

model feedback {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content    String   @db.VarChar
  user_id    String   @db.Uuid
  product_id String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  product    product  @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user       user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model order {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  order_date    DateTime  @db.Timestamp(6)
  total_amount  Int?
  status        String?   @db.VarChar(50)
  delivery_date DateTime? @db.Timestamp(6)
  user_id       String    @db.Uuid
  product_id    String    @db.Uuid
  created_at    DateTime  @default(now()) @db.Timestamp(6)
  updated_at    DateTime  @default(now()) @db.Timestamp(6)
  product       product   @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user          user      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model product {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String     @db.VarChar(100)
  description String?    @db.VarChar
  price       Int?
  quantity    Int?
  company_id  String     @db.Uuid
  created_at  DateTime   @default(now()) @db.Timestamp(6)
  updated_at  DateTime   @default(now()) @db.Timestamp(6)
  feedback    feedback[]
  order       order[]
  company     company    @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model review {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title      String   @db.VarChar(100)
  content    String   @db.VarChar
  rating     Int
  user_id    String   @db.Uuid
  company_id String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  company    company  @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user       user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String     @unique @db.VarChar(255)
  firstName   String?    @db.VarChar(255)
  lastName    String?    @db.VarChar(255)
  roq_user_id String     @db.VarChar(255)
  tenant_id   String     @db.VarChar(255)
  created_at  DateTime   @default(now()) @db.Timestamp(6)
  updated_at  DateTime   @default(now()) @db.Timestamp(6)
  company     company[]
  feedback    feedback[]
  order       order[]
  review      review[]
}
